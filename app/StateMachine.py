
import asyncio

from aiogram import F, Router
from aiogram.types import Message 
from aiogram.filters import  Command
from aiogram.types import  CallbackQuery

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext


from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest

import app.keyboard as kb 
import app.database.request as rq

router1 = Router()

    

class NewItem(StatesGroup):
    name = State()
    strenght = State()
    taste = State()
    description = State()
    price = State()
    quantity = State()
    category = State()
    next_state = State()

class Bonus(StatesGroup):
    name = State()
    
class Broadcast(StatesGroup):
    text = State()
        
@router1.callback_query(F.data == "addProduct")
async def newitem(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    chekadmin = await rq.chekAdmin(tg_id = user_id)
    if chekadmin:
        await state.set_state(NewItem.name)
        await callback.message.answer('üñå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    else:
        await callback.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞...")

@router1.message(Command("newitem")) # –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def newitem(message: Message, state: FSMContext):
    user_id = message.from_user.id
    chekadmin = await rq.chekAdmin(tg_id = user_id)
    if chekadmin:
        await state.set_state(NewItem.name)
        await message.answer('üñå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞...")
    
        
@router1.message(NewItem.name)
async def notName(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(NewItem.strenght)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –∫—Ä–µ–ø–∫–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞!')
    
@router1.message(NewItem.strenght) 
async def notText(message: Message, state: FSMContext):
    await state.update_data(strenght=message.text)
    await state.set_state(NewItem.taste)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∫—É—Å —Ç–æ–≤–∞—Ä–∞!')
    
@router1.message(NewItem.taste) 
async def notText(message: Message, state: FSMContext):
    await state.update_data(taste=message.text)
    await state.set_state(NewItem.description)
    await message.answer('–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ç–æ–≤–∞—Ä—É')

@router1.message(NewItem.description) 
async def notText(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(NewItem.price)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞!')
    
@router1.message(NewItem.price) 
async def notText(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await state.set_state(NewItem.quantity)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞!')
    
@router1.message(NewItem.quantity) 
async def notText(message: Message, state: FSMContext):
    await state.update_data(quantity=message.text)
    await state.set_state(NewItem.category)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä–æ–π!')
    
@router1.message(NewItem.category) 
async def notText(message: Message, state: FSMContext):
    if message.text in ['1', '2', '3', '4']:
        await state.update_data(category=message.text)
        await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        
        data = await state.get_data()
        await rq.new_item(
            name=data["name"],
            strenght=data["strenght"],
            taste=data["taste"],
            description=data["description"],
            price=data["price"],
            quantity=data["quantity"],
            category=data["category"]
            # category –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = 1
        )
        
        await rq.additem_toAll(
            name=data["name"],
            strenght=data["strenght"],
            taste=data["taste"],
            description=data["description"],
            price=data["price"],
            quantity=data["quantity"])
    
        await state.clear()
        # –¢—É—Ç –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        # await state.set_state(NewItem.next_state)
    elif message.text == '2609':
        await message.answer('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç 1 –¥–æ 4.')
        await state.set_state(NewItem.next_state)
    else:
        await message.answer('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç 1 –¥–æ 4.')
        # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è NewItem.category, —Ç–∞–∫ —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–µ—Ç—Å—è —Å–Ω–æ–≤–∞
        
@router1.message(NewItem.category) 
async def notText(message: Message, state: FSMContext):
    if message.text in ['1', '2', '3', '4']:
        await state.update_data(category=message.text)
        
@router1.callback_query(F.data == "sendall")
async def broadcast(callback: CallbackQuery, state: FSMContext):
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏!")
        await state.set_state(Broadcast.text)

@router1.message(Broadcast.text)
async def broadcast(message: Message, state: FSMContext):
    x = 0
    await state.update_data(text=message.text)
    await message.answer("üì§ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
    
    data = await state.get_data()
    
    user_ids = await rq.broadcast_users()
    for user_id in user_ids:
        try:
            x = x + 1
            await message.bot.send_message(user_id, "üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! "
                            "–í—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. "
                            "–°–µ–π—á–∞—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. "
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ.\n\n <code> {data["text"]}</code>", parse_mode='HTML')
            await asyncio.sleep(0.05)
        except (TelegramForbiddenError, TelegramBadRequest):
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}")
    
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ {x} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
    
    await state.clear()
    
@router1.callback_query(F.data == "cupon")
async def bonus(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üéÅ _–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É–ø–æ–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ:_", parse_mode='Markdown')
    await state.set_state(Bonus.name)
    
@router1.message(Bonus.name)
async def Bous(message: Message,state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    
    text = data["name"]
    user = message.from_user.id
    
    
    setting = await rq.set_bonuce(text, user)
    
    if setting:
        await message.answer("‚úÖ –ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    else: 
        await message.answer("–ï—â–µ –Ω–µ—Ç—É —Ç–∞–∫–æ–≥–æ –±–æ–Ω—É—Å–∞ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π...")
        
    await state.clear()