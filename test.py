import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from core.handlers.basic import start_cmd

bot = Bot(token = '7610953420:AAFJSJneepus_P5BYdeHolzEEOK-8jA107g')

dp = Dispatcher() #–ö–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è


# button1 = KeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 1")
# button2 = KeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 2")

# # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
# reply_keyboard = ReplyKeyboardMarkup(
#     keyboard=[[button1, button2]],
#     resize_keyboard=True
# )







@dp.message()
async def reply_to_buttons(message: types.Message):
    if message.text == "üí≥ –ó–∞–∫–∞–∑–∞—Ç—å":
        await message.answer(" dsads")
    elif message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await message.answer("–£ –º–µ–Ω—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ, –∞ —É —Ç–µ–±—è? üòâ")
    elif message.text == "üìÉ –°–ø–∏—Å–æ–∫":
        
        # categories = types.InlineKeyboardMarkup(row_width=1)
        strenght = InlineKeyboardButton(text='–ö—Ä–µ–ø–∫–æ—Å—Ç—å', callback_data='strenght')
        Taste = InlineKeyboardButton(text='–í–∫—É—Å', callback_data='xyi')
        Brand = types.InlineKeyboardButton(text='–ù–∞–∑–≤–∞–Ω–∏–µ –õ–∏–Ω–µ–π–∫–∏', callback_data='brand')
        alle = types.InlineKeyboardButton(text='–í—Å–µ —Ç–æ–≤–∞—Ä—ã', callback_data='alle')
        
        reply_categories = InlineKeyboardMarkup(
        inline_keyboard=[[strenght],[Taste],[Brand] ,[alle ]],
        resize_keyboard=True# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        )
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞!", reply_markup = reply_categories)

    elif message.text == "üíª –ü—Ä–æ—Ñ–∏–ª—å":
        await message.answer("–£ –º–µ–Ω—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ, –∞ —É —Ç–µ–±—è? üòâ")
    else:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é üòï –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é.")




    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
@dp.message(Command("menu"))
async def menu_cmd(message: types.Message):

    button1 = KeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 1")
    button2 = KeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 2")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    reply_keyboard = ReplyKeyboardMarkup(
        keyboard=[[button1, button2]],  # –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        resize_keyboard=True
    )
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=reply_keyboard)
    
    
@dp.message(Command("inline"))
async def inline_btn(message: types.Message):
    button1 = InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 1", callback_data="btn_1")
    button2 = InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 2", callback_data="btn_2")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    reply_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[button1, button2]]  # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    )
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=reply_keyboard)
    
@dp.message(~ (F.text.contains('–ø—Ä–æ–≤–µ—Ä–∫–∞'))) # –ö–∞–∫ message handler
async def strt_cmd(message: types.Message):
    await message.answer( '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π!')

@dp.message() # –ö–∞–∫ message handler
async def echo(message: types.Message):
    await bot.send_message(message.chat.id, '*–û—Ç–≤–µ—Ç*', parse_mode = 'Markdown') # –û–¥–∏–Ω–∞–∫–æ–≤–æ
    await message.answer(message.text) # –û–¥–∏–Ω–∞–∫–æ–≤–æ
    await message.reply('–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    
    



async def main():
    await bot.delete_webhook(drop_pending_updates=True) #–ù–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±—ã—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ, –∫–æ–≥–¥–∞ –±–æ—Ç –±—ã–ª –Ω–µ –≤ —Å–µ—Ç–∏
    await dp.start_polling(bot) #–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    
    
if __name__ == "__main__":
    asyncio.run(main())